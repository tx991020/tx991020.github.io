<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大王派我来搬砖</title>
    <link>http://gopherday.com/</link>
    <description>Recent content on 大王派我来搬砖</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>tx991020@gmail.com (andy wu)</managingEditor>
    <webMaster>tx991020@gmail.com (andy wu)</webMaster>
    <lastBuildDate>Thu, 15 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gopherday.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AriaNg&#43;Caddy FileManager打造自己的离线下载网盘</title>
      <link>http://gopherday.com/post/2017-06-13-ariang-filemanerger/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-06-13-ariang-filemanerger/</guid>
      <description>简单介绍 Aria2 是一个命令行下运行、多协议、多来源下载工具，支持磁力链接、BT 种子、HTTP、FTP 等下载协议，当然因为它是命令行下载工具，所以我们想下载一个东西还需要去敲命令自然是不方便，于是就有一些人根据 Aria2 的 API 开发了一些在线管理面板，可以直接在网页上面添加管理任务。
本教程介绍的是 AriaNg，Github 项目：https://github.com/mayswind/AriaNg
Aria2 是一个后端 (服务端) 的程序，而 AriaNg 是一个前端 (HTML+JS 静态) 控制面板，不需要和 Aria2(后端 / 服务端)放在一个服务器或者设备中，你甚至可以只在服务器上面搭建 Aria2 后端，然后访问别人建好的 AriaNg 前端面板，也可以远程操作 Aria2 后端！
centos6 安装Aria2 wget http://repository.it4i.cz/mirrors/repoforge/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm rpm -ivh rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm yum -y install aria2 # 测试 aria2c -v  配置后端 # 创建Aria2配置文件夹 mkdir /root/.aria2 &amp;amp;&amp;amp; cd /root/.aria2 # 下载Aria2配置文件、DHT文件(BT有没有速度就靠这个) wget --no-check-certificate https://softs.fun/Other/Aria2/aria2.conf wget --no-check-certificate https://softs.fun/Other/Aria2/dht.dat # 创建一个空的 Aria2 下载任务保存文件 echo &amp;#39;&amp;#39; &amp;gt; /root/.</description>
    </item>
    
    <item>
      <title>caddy nginx 对比</title>
      <link>http://gopherday.com/post/2017-06-10-caddy-nginx/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-06-10-caddy-nginx/</guid>
      <description>Caddy 是什么？ Caddy 是一个多功能的 HTTP web服务器，并且使用Let&amp;rsquo;s Encrypt提供的免费证书，自动让网站升级到HTTPS
Every Site on HTTPS Caddy is a general-purpose HTTP/2 web server that serves HTTPS by default. Fork Caddy On Github
为什么要使用 Caddy 安全 Caddy 是一个默认使用https协议的web服务器 无依赖 Caddy 使用 Go 语言编写，编译好的二进制文件能够运行在任何支持Go语言的平台，不需要自己安装任何库。 使用简单 Caddy 的配置简单，不管你是新的web开发者，还是专业人士，都能够快速上手
Caddy 一键安装脚本
wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;amp;&amp;amp; chmod +x caddy_install.sh &amp;amp;&amp;amp; bash caddy_install.sh  这里我们看一下官网的例子说明 Caddy Documentation  :2015 # Host: (any), Port: 2015 localhost # Host: localhost; Port: 2015 localhost:8080 # Host: localhost; Port: 8080 example.</description>
    </item>
    
    <item>
      <title>使用 rclone 将文件同步至 Google Dirve</title>
      <link>http://gopherday.com/post/2017-05-10-rclone/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-05-10-rclone/</guid>
      <description>首先是下载文件 yum install unzip wget -y wget -O https://downloads.rclone.org/rclone-current-linux-amd64.zip unzip rclone-current-linux-amd64.zip cd rclone-*-linux-amd64 然后复制文件到相关路径 cp rclone /usr/bin/ chown root:root /usr/bin/rclone chmod 755 /usr/bin/rclone 新建一个配置 rclone config n) New remote d) Delete remote q) Quit config e/n/d/q&amp;gt; n name&amp;gt; google(你的配置名称,此处随意填写但之后需要用到) Type of storage to configure. Choose a number from below, or type in your own value 1 / Amazon Drive \ &amp;#34;amazon cloud drive&amp;#34; 2 / Amazon S3 (also Dreamhost, Ceph, Minio) \ &amp;#34;s3&amp;#34; 3 / Backblaze B2 \ &amp;#34;b2&amp;#34; 4 / Dropbox \ &amp;#34;dropbox&amp;#34; 5 / Encrypt/Decrypt a remote \ &amp;#34;crypt&amp;#34; 6 / Google Cloud Storage (this is not Google Drive) \ &amp;#34;google cloud storage&amp;#34; 7 / Google Drive \ &amp;#34;drive&amp;#34; 8 / Hubic \ &amp;#34;hubic&amp;#34; 9 / Local Disk \ &amp;#34;local&amp;#34; 10 / Microsoft OneDrive \ &amp;#34;onedrive&amp;#34; 11 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \ &amp;#34;swift&amp;#34; 12 / SSH/SFTP Connection \ &amp;#34;sftp&amp;#34; 13 / Yandex Disk \ &amp;#34;yandex&amp;#34; Storage&amp;gt; 7(根据网盘类型选择Google Dirve) Google Application Client Id - leave blank normally.</description>
    </item>
    
    <item>
      <title>宝塔linux 控制面板</title>
      <link>http://gopherday.com/post/2017-04-10-baota-linux/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-04-10-baota-linux/</guid>
      <description>Centos安装命令：
yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;amp;&amp;amp; sh install.sh Ubuntu/Deepin安装命令：
wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;amp;&amp;amp; sudo bash install.sh 重启
service bt restart</description>
    </item>
    
    <item>
      <title>Photoswipe Gallery Sample</title>
      <link>http://gopherday.com/post/2017-03-20-photoswipe-gallery-sample/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-03-20-photoswipe-gallery-sample/</guid>
      <description>&lt;p&gt;Beautiful Hugo adds a few custom shortcodes created by &lt;a href=&#34;https://www.liwen.id.au/heg/&#34;&gt;Li-Wen Yip&lt;/a&gt; and &lt;a href=&#34;https://github.com/GjjvdBurg/HugoPhotoSwipe&#34;&gt;Gert-Jan van den Berg&lt;/a&gt; for making galleries with &lt;a href=&#34;http://photoswipe.com&#34;&gt;PhotoSwipe&lt;/a&gt; .&lt;/p&gt;



&lt;div class=&#34;gallery caption-position-bottom caption-effect-fade hover-effect-zoom hover-transition&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
	  
  
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://gopherday.com/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;/img/hexagon-thumb.jpg&#39;);&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://gopherday.com/img/hexagon-thumb.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://gopherday.com/img/hexagon.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
  

&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;/img/sphere-thumb.jpg&#39;);&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://gopherday.com/img/sphere-thumb.jpg&#34; alt=&#34;Sphere&#34;/&gt;
    &lt;/div&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Sphere&lt;/p&gt;
      &lt;/figcaption&gt;
    &lt;a href=&#34;http://gopherday.com/img/sphere.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
  

&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;/img/triangle-thumb.jpg&#39;);&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://gopherday.com/img/triangle-thumb.jpg&#34; alt=&#34;This is a long comment about a triangle&#34;/&gt;
    &lt;/div&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Triangle&lt;/p&gt;
      &lt;/figcaption&gt;
    &lt;a href=&#34;http://gopherday.com/img/triangle.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Big Image Sample</title>
      <link>http://gopherday.com/post/2017-03-07-bigimg-sample/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-03-07-bigimg-sample/</guid>
      <description>&lt;p&gt;The image banners at the top of the page are refered to as &amp;ldquo;bigimg&amp;rdquo; in this theme. They are optional, and one more more can be specified. If more than one is specified, the images rotate every 10 seconds. In the front matter, bigimgs are specified using an array of hashes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Sample</title>
      <link>http://gopherday.com/post/2017-03-05-math-sample/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-03-05-math-sample/</guid>
      <description>&lt;p&gt;KaTeX can be used to generate complex math formulas server-side.&lt;/p&gt;

&lt;p&gt;$$
\phi = \frac{(1+\sqrt{5})}{2} = 1.6180339887\cdots
$$&lt;/p&gt;

&lt;p&gt;Additional details can be found on &lt;a href=&#34;https://github.com/Khan/KaTeX&#34;&gt;GitHub&lt;/a&gt; or on the &lt;a href=&#34;http://tiddlywiki.com/plugins/tiddlywiki/katex/&#34;&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spark basic</title>
      <link>http://gopherday.com/post/2017-02-15-spark-basic/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-02-15-spark-basic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>spark sql优化原理图</title>
      <link>http://gopherday.com/post/2017-02-12-spark-pic/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-02-12-spark-pic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>spark streaming</title>
      <link>http://gopherday.com/post/2017-02-11-sparkstreaming/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-02-11-sparkstreaming/</guid>
      <description>from pyspark.sql import SparkSession from pyspark.streaming.kafka import KafkaUtils from pyspark.streaming import StreamingContext if __name__ == &amp;#39;__main__&amp;#39;: topic =&amp;#34;test&amp;#34; spark = SparkSession.builder.appName(&amp;#34;Python Spark &amp;#34;).master(&amp;#34;local[2]&amp;#34;).getOrCreate() sc = spark.sparkContext ssc = StreamingContext(sc, 10) kvs = KafkaUtils.createDirectStream(ssc,[topic],{&amp;#34;metadata.broker.list&amp;#34;:&amp;#34;127.0.0.1:9092&amp;#34;}) lines = kvs.map(lambda x: x[1]) counts = lines.flatMap(lambda line: line.split(&amp;#34; &amp;#34;)) \ .map(lambda word: (word, 1)) \ .reduceByKey(lambda a, b: a + b) counts.pprint() ssc.start() ssc.awaitTermination() </description>
    </item>
    
    <item>
      <title>sparksql</title>
      <link>http://gopherday.com/post/2017-02-10-sparksql/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2017-02-10-sparksql/</guid>
      <description>from pyspark.sql import SparkSession if __name__ == &amp;#39;__main__&amp;#39;: spark = SparkSession.builder.appName(&amp;#34;Python Spark &amp;#34;).master(&amp;#34;local[2]&amp;#34;).getOrCreate() jdbcDF = spark.read.format(&amp;#34;jdbc&amp;#34;).option(&amp;#34;url&amp;#34;, &amp;#34;jdbc:mysql://localhost:3306/video&amp;#34;).option(&amp;#34;driver&amp;#34;,&amp;#34;com.mysql.jdbc.Driver&amp;#34;).option(&amp;#34;dbtable&amp;#34;, &amp;#34;baidu&amp;#34;).option(&amp;#34;user&amp;#34;, &amp;#34;root&amp;#34;).option(&amp;#34;password&amp;#34;, &amp;#34;123456&amp;#34;).load() jdbcDF.show() </description>
    </item>
    
    <item>
      <title>pandas basic</title>
      <link>http://gopherday.com/post/2016-12-20-pandas-pic/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016-12-20-pandas-pic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>APScheduler</title>
      <link>http://gopherday.com/post/2015-06-10-python-apscheduler/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-06-10-python-apscheduler/</guid>
      <description>定时任务框架APScheduler学习详解 APScheduler简介 在平常的工作中几乎有一半的功能模块都需要定时任务来推动，例如项目中有一个定时统计程序，定时爬出网站的URL程序，定时检测钓鱼网站的程序等等，都涉及到了关于定时任务的问题，第一时间想到的是利用time模块的time.sleep()方法使程序休眠来达到定时任务的目的，虽然这样也可以，但是总觉得不是那么的专业，^_^所以就找到了python的定时任务模块APScheduler：
APScheduler基于Quartz的一个Python定时任务框架，实现了Quartz的所有功能，使用起来十分方便。提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。基于这些功能，我们可以很方便的实现一个python定时任务系统。
APScheduler有四种组成部分： 触发器(trigger)包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的。
作业存储(job store)存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。
执行器(executor)处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。
调度器(scheduler)是其他的组成部分。你通常在应用只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。配置作业存储和执行器可以在调度器中完成，例如添加、修改和移除作业。　简单应用：
import time from apscheduler.schedulers.blocking import BlockingScheduler
def my_job(): print time.strftime(&amp;lsquo;%Y-%m-%d %H:%M:%S&amp;rsquo;, time.localtime(time.time()))
sched = BlockingScheduler() sched.add_job(my_job, &amp;lsquo;interval&amp;rsquo;, seconds=5) sched.start() 上面的例子表示每隔5s执行一次my_job函数，输出当前时间信息
操作作业 1. 添加作业 上面是通过add_job()来添加作业，另外还有一种方式是通过scheduled_job()修饰器来修饰函数
import time from apscheduler.schedulers.blocking import BlockingScheduler
sched = BlockingScheduler()
@sched.scheduled_job(&amp;lsquo;interval&amp;rsquo;, seconds=5) def my_job(): print time.strftime(&amp;lsquo;%Y-%m-%d %H:%M:%S&amp;rsquo;, time.localtime(time.time()))
sched.start() 2. 移除作业
job = scheduler.add_job(myfunc, &amp;lsquo;interval&amp;rsquo;, minutes=2) job.remove() ###如果有多个任务序列的话可以给每个任务设置ID号，可以根据ID号选择清除对象，且remove放到start前才有效 sched.add_job(myfunc, &amp;lsquo;interval&amp;rsquo;, minutes=2, id=&amp;lsquo;my_job_id&amp;rsquo;) sched.remove_job(&amp;lsquo;my_job_id&amp;rsquo;) 3. 暂停和恢复作业 暂停作业:</description>
    </item>
    
    <item>
      <title>golang set</title>
      <link>http://gopherday.com/post/2016-11-20-golang-set/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016-11-20-golang-set/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type Set struct { m map[int]bool sync.RWMutex } func New() *Set { return &amp;amp;Set{ m: map[int]bool{}, } } func (s *Set) Add(item int) { s.Lock() defer s.Unlock() s.m[item] = true } func (s *Set) Remove(item int) { s.Lock() s.Unlock() delete(s.m, item) } func (s *Set) Has(item int) bool { s.RLock() defer s.RUnlock() _, ok := s.m[item] return ok } func (s *Set) Len() int { return len(s.</description>
    </item>
    
    <item>
      <title>pandas to dict</title>
      <link>http://gopherday.com/post/2016.11.20-python-pandas01/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016.11.20-python-pandas01/</guid>
      <description>python pandas to dict import pandas as pd import json b = [{&amp;#39;source&amp;#39;: &amp;#39;baidu&amp;#39;, &amp;#39;num&amp;#39;: 61}, {&amp;#39;source&amp;#39;: &amp;#39;cctv&amp;#39;, &amp;#39;num&amp;#39;: 14}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 3}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 1}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 1}] if __name__ == &amp;#39;__main__&amp;#39;: df =pd.DataFrame(b) c = df[&amp;#34;num&amp;#34;].groupby(df[&amp;#39;source&amp;#39;]).sum()[:5] gg = pd.DataFrame(c) pandas_to_dict = gg.to_dict() pandas_to_json = gg.to_json() x = {&amp;#39;baidu&amp;#39;: 61, &amp;#39;cctv&amp;#39;: 14, &amp;#39;cntv&amp;#39;: 5} y = {&amp;#34;微信&amp;#34;: 0, &amp;#34;微博&amp;#34;: 0,&amp;#34;头条&amp;#34;: 0} #合并两个字典 z = dict(x,**y) print(z) q= [] dd ={&amp;#39;微信&amp;#39;: 40, &amp;#39;微博&amp;#39;: 0, &amp;#39;头条&amp;#39;: 156, &amp;#39;baidu&amp;#39;: 610, &amp;#39;cntv&amp;#39;: 10} for v in dd: q.</description>
    </item>
    
    <item>
      <title>爬虫 pyquery goquery css匹配语法 智障使用模板</title>
      <link>http://gopherday.com/post/2016-09-11-pyquery-goquery/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016-09-11-pyquery-goquery/</guid>
      <description>pyquery 用法模板 主要分为 1类匹配 写法 doc(.class)， 2 id 匹配 写法doc(#id), 3标签匹配 A B=&amp;#34;C&amp;#34; 写法doc(A[B=&amp;#34;C&amp;#34;]) 4值匹配 A=&amp;#34;B&amp;#34; 写法 B = doc(&amp;#34;xxx&amp;#34;).attr(&amp;#34;A&amp;#34;) 或B = doc(&amp;#34;xxx&amp;#34;).attr.A 5遍历相同类型。 for x in doc(&amp;#34;yyyy&amp;#34;).items() import requests from pyquery import PyQuery as pq r = requests.get(&amp;#34;http://video.infolz.com/&amp;#34;) r.encoding=&amp;#34;utf-8&amp;#34; r1 = requests.get(&amp;#34;http://www.infolz.com/2016/1213/303.shtml&amp;#34;) &amp;#34;&amp;#34;&amp;#34; &amp;lt;object class=&amp;#34;cmstopVideo&amp;#34; width=&amp;#34;650&amp;#34; height=&amp;#34;519&amp;#34; data=&amp;#34;https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&amp;amp;v=20161117&amp;amp;vid=v0354ryo54j&amp;amp;auto=0&amp;#34; type=&amp;#34;application/x-shockwave-flash&amp;#34;&amp;gt;&amp;lt;param name=&amp;#34;src&amp;#34; value=&amp;#34;https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&amp;amp;v=20161117&amp;amp;vid=v0354ryo54j&amp;amp;auto=0&amp;#34;/&amp;gt;&amp;lt;param name=&amp;#34;allowfullscreen&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;&amp;lt;param name=&amp;#34;allowscriptaccess&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;&amp;lt;param name=&amp;#34;wmode&amp;#34; value=&amp;#34;Transparent&amp;#34;/&amp;gt;&amp;lt;/object&amp;gt; &amp;#34;&amp;#34;&amp;#34; 1单层查找 a &amp;gt; b 横跨多层查找用空格 a b 2选择类 .</description>
    </item>
    
    <item>
      <title>Code Sample</title>
      <link>http://gopherday.com/post/2016-03-08-code-sample/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016-03-08-code-sample/</guid>
      <description>&lt;p&gt;The following are two code samples using syntax highlighting.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang redispool</title>
      <link>http://gopherday.com/post/2016-02-15-golang-redispool/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016-02-15-golang-redispool/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/garyburd/redigo/redis&amp;#34; ) var pool *redis.Pool func init() { pool = &amp;amp;redis.Pool{ MaxIdle: 16, MaxActive: 0, IdleTimeout: 300, Dial: func() (redis.Conn, error) { return redis.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;localhost:6379&amp;#34;) }, } } func main() { c := pool.Get() defer c.Close() _, err := c.Do(&amp;#34;Set&amp;#34;, &amp;#34;abc&amp;#34;, 100) if err != nil { fmt.Println(err) return } r, err := redis.Int(c.Do(&amp;#34;Get&amp;#34;, &amp;#34;abc&amp;#34;)) if err != nil { fmt.Println(&amp;#34;get abc failed,&amp;#34;, err) return } fmt.</description>
    </item>
    
    <item>
      <title>pymysql 模板</title>
      <link>http://gopherday.com/post/2015-07-13-python-mysql-utils/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-07-13-python-mysql-utils/</guid>
      <description>import pymysql # MySQL 建立连接 class MySQLPipeline(object): def __init__(self, host, port, user, password, db): self.mysql_host = host self.mysql_port = port self.mysql_user = user self.mysql_password = password self.mysql_db = db # 创建MYSQL数据库链接对象 self.conn = pymysql.connect(host=self.mysql_host, user=self.mysql_user, password=self.mysql_password, db=self.mysql_db, charset=&amp;#34;utf8&amp;#34;) # 查询数据 def searching(self, sql): try: with self.conn as cur: cur.execute(sql) logger.info(&amp;#34;sql查询成功&amp;#34;) return cur except Exception as e: print(e) logger.error(e) return None #增删改 def processing(self, sql): try: with self.conn as cur: cur.execute(sql) logger.</description>
    </item>
    
    <item>
      <title>pyspider 常用模板</title>
      <link>http://gopherday.com/post/2015-07-10-pyspider-01/</link>
      <pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-07-10-pyspider-01/</guid>
      <description>from pyspider.libs.base_handler import * import time import re class Handler(BaseHandler): crawl_config = { &amp;#34;User-Agent&amp;#34;: &amp;#34;Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4&amp;#34; } @every(minutes=24 * 60) def on_start(self): self.crawl( &amp;#39;http://www.yntv.cn/page_list_text/picindex.html?sectionid=425&amp;amp;page=1&amp;amp;title=%E7%B2%BE%E5%BD%A9%E8%A7%86%E9%A2%91&amp;#39;, callback=self.index_page, fetch_type=&amp;#39;js&amp;#39;) self.crawl( &amp;#39;http://www.yntv.cn/page_list_text/picindex.html?sectionid=429&amp;amp;page=1&amp;amp;title=%E7%83%AD%E6%92%AD%E5%89%A7%E5%9C%BA&amp;#39;, callback=self.index_page, fetch_type=&amp;#39;js&amp;#39;) @config(age=23 * 60 * 60) def index_page(self, response): for x, y in zip(response.doc(&amp;#39;.video_item_img&amp;#39;).items(), response.doc(&amp;#39;.item_img&amp;#39;).items()): href = x(&amp;#39;a&amp;#39;).attr.href self.crawl(href, callback=self.detail_page, fetch_type=&amp;#39;js&amp;#39;, save={&amp;#39;p&amp;#39;: y.attr.src}, js_script=&amp;#39;&amp;#39;&amp;#39; function() { return video } &amp;#39;&amp;#39;&amp;#39;) @config(priority=10) def detail_page(self, response): try: a = re.</description>
    </item>
    
    <item>
      <title>vagrant 入门</title>
      <link>http://gopherday.com/post/2014-11-10-vagrant/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2014-11-10-vagrant/</guid>
      <description>基础镜像 centos7 http://pan.baidu.com/s/1o7BSmoU centos6 http://pan.baidu.com/s/1o81Zb9C ubuntu http://pan.baidu.com/s/1pLzVhnP 添加本地box vagrant box add 自定义你的box名称 box路径 vagrant box add my_first_box D:/centos-7.0-x86_64.box 查看已添加的box vagrant box list 删除box vagrant box remove your_box_name vagrant虚拟机优化 虚拟机名称 config.vm.hostname = &amp;#34;test&amp;#34; 虚拟机主机名 vb.name = &amp;#34;ubuntu_test&amp;#34; 配置虚拟机内存 vb.memory = &amp;#34;512&amp;#34; 配置虚拟机CPU vb.cpus = 1 完整示例 先复制一份Vagrantfile为Vagrantfile.bak作为备份 Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;centos&amp;#34; config.vm.network &amp;#34;forwarded_port&amp;#34;, guest:80, host:80 config.vm.network &amp;#34;forwarded_port&amp;#34;, guest:8080, host:8080 config.vm.synced_folder &amp;#34;/Users/andy/data&amp;#34;, &amp;#39;/data&amp;#39;, :smb =&amp;gt; true config.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.</description>
    </item>
    
    <item>
      <title>Flake it till you make it</title>
      <link>http://gopherday.com/post/2015-02-26-flake-it-till-you-make-it/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-02-26-flake-it-till-you-make-it/</guid>
      <description>Under what circumstances should we step off a path? When is it essential that we finish what we start? If I bought a bag of peanuts and had an allergic reaction, no one would fault me if I threw it out. If I ended a relationship with a woman who hit me, no one would say that I had a commitment problem. But if I walk away from a seemingly secure route because my soul has other ideas, I am a flake?</description>
    </item>
    
    <item>
      <title>Test markdown</title>
      <link>http://gopherday.com/post/2015-02-20-test-markdown/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-02-20-test-markdown/</guid>
      <description>You can write regular markdown here and Jekyll will automatically convert it to a nice webpage. I strongly encourage you to take 5 minutes to learn how to write in markdown - it&amp;rsquo;ll teach you how to transform regular text into bold/italics/headings/tables/etc.
Here is some bold text
Here is a secondary heading Here&amp;rsquo;s a useless table:
   Number Next number Previous number     Five Six Four   Ten Eleven Nine   Seven Eight Six   Two Three One    How about a yummy crepe?</description>
    </item>
    
    <item>
      <title>To be</title>
      <link>http://gopherday.com/post/2015-02-13-hamlet-monologue/</link>
      <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2015-02-13-hamlet-monologue/</guid>
      <description>When he himself might his quietus make With a bare bodkin? Who would fardels bear, To grunt and sweat under a weary life, But that the dread of something after death, The undiscovered country, from whose bourn No traveller returns, puzzles the will, And makes us rather bear those ills we have Than fly to others that we know not of? Thus conscience does make cowards of us all, And thus the native hue of resolution Is sicklied o&amp;rsquo;er with the pale cast of thought, And enterprise of great pitch and moment With this regard their currents turn awry And lose the name of action.</description>
    </item>
    
    <item>
      <title>mysql 安装配置</title>
      <link>http://gopherday.com/post/2014-07-10-mysql-setup/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2014-07-10-mysql-setup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>python 重试装饰器</title>
      <link>http://gopherday.com/post/2014.05-10-python-retring/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2014.05-10-python-retring/</guid>
      <description> python retrying chache def login_required(view_func): &amp;#34;&amp;#34;&amp;#34;检验用户的登录状态&amp;#34;&amp;#34;&amp;#34; @wraps(view_func) # 不改变原有函数的签名文档 def wrapper(*args, **kwargs): user_id = session.get(&amp;#34;user_id&amp;#34;) if user_id is not None: # 表示用户已经登录 # 使用g对象保存user_id，在视图函数中可以直接使用 g.user_id = user_id return view_func(*args, **kwargs) else: # 用户未登录 resp = { &amp;#34;errno&amp;#34;: RET.SESSIONERR, &amp;#34;errmsg&amp;#34;: &amp;#34;用户未登录&amp;#34; } return jsonify(resp) return wrapper # 构建装饰器 def wraps(func): @functools.wraps(func) def decorator( *args, **kwargs): print(&amp;#34;开始验证&amp;#34;) print(&amp;#34;%scalled&amp;#34; % func.__name__) result = func(*args, **kwargs) print(&amp;#34;验证完毕&amp;#34;) print(&amp;#34;%send&amp;#34; % func.__name__) return result return decorator @wraps def connnet_db(): print(&amp;#34;searching&amp;#34;) def singleton(fun): instances = {} def decorator(*args,**kwargs): if fun not in instances: print(111,fun) instances[fun] = fun(*args,**kwargs) return instances[fun] else: print(&amp;#34;已存在&amp;#34;) return decorator def singleton(fun): cache = {} def decorator(*args,**kwargs): if fun not in cache: print(111,fun) cache[fun] = fun(*args,**kwargs) return cache[fun] else: print(&amp;#34;已存在&amp;#34;) return decorator @singleton def fib(i): if i &amp;lt; 2: return 1 return fib(i-1) + fib(i-2) if __name__ == &amp;#39;__main__&amp;#39;: for i in range(10): test() </description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://gopherday.com/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/page/about/</guid>
      <description> My name is Andy Wu. I have the following qualities:
 I rock a great mustache I&amp;rsquo;m extremely loyal to my family  What else do you need?
my history </description>
    </item>
    
  </channel>
</rss>