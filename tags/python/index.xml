<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 大王派我来搬砖</title>
    <link>http://gopherday.com/tags/python/</link>
    <description>Recent content in Python on 大王派我来搬砖</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>tx991020@gmail.com (andy wu)</managingEditor>
    <webMaster>tx991020@gmail.com (andy wu)</webMaster>
    <lastBuildDate>Sun, 20 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gopherday.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pandas to dict</title>
      <link>http://gopherday.com/post/2016.11.20-python-pandas01/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2016.11.20-python-pandas01/</guid>
      <description>python pandas to dict import pandas as pd import json b = [{&amp;#39;source&amp;#39;: &amp;#39;baidu&amp;#39;, &amp;#39;num&amp;#39;: 61}, {&amp;#39;source&amp;#39;: &amp;#39;cctv&amp;#39;, &amp;#39;num&amp;#39;: 14}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 3}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 1}, {&amp;#39;source&amp;#39;: &amp;#39;cntv&amp;#39;, &amp;#39;num&amp;#39;: 1}] if __name__ == &amp;#39;__main__&amp;#39;: df =pd.DataFrame(b) c = df[&amp;#34;num&amp;#34;].groupby(df[&amp;#39;source&amp;#39;]).sum()[:5] gg = pd.DataFrame(c) pandas_to_dict = gg.to_dict() pandas_to_json = gg.to_json() x = {&amp;#39;baidu&amp;#39;: 61, &amp;#39;cctv&amp;#39;: 14, &amp;#39;cntv&amp;#39;: 5} y = {&amp;#34;微信&amp;#34;: 0, &amp;#34;微博&amp;#34;: 0,&amp;#34;头条&amp;#34;: 0} #合并两个字典 z = dict(x,**y) print(z) q= [] dd ={&amp;#39;微信&amp;#39;: 40, &amp;#39;微博&amp;#39;: 0, &amp;#39;头条&amp;#39;: 156, &amp;#39;baidu&amp;#39;: 610, &amp;#39;cntv&amp;#39;: 10} for v in dd: q.</description>
    </item>
    
    <item>
      <title>python 重试装饰器</title>
      <link>http://gopherday.com/post/2014.05-10-python-retring/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      <author>tx991020@gmail.com (andy wu)</author>
      <guid>http://gopherday.com/post/2014.05-10-python-retring/</guid>
      <description> python retrying chache def login_required(view_func): &amp;#34;&amp;#34;&amp;#34;检验用户的登录状态&amp;#34;&amp;#34;&amp;#34; @wraps(view_func) # 不改变原有函数的签名文档 def wrapper(*args, **kwargs): user_id = session.get(&amp;#34;user_id&amp;#34;) if user_id is not None: # 表示用户已经登录 # 使用g对象保存user_id，在视图函数中可以直接使用 g.user_id = user_id return view_func(*args, **kwargs) else: # 用户未登录 resp = { &amp;#34;errno&amp;#34;: RET.SESSIONERR, &amp;#34;errmsg&amp;#34;: &amp;#34;用户未登录&amp;#34; } return jsonify(resp) return wrapper # 构建装饰器 def wraps(func): @functools.wraps(func) def decorator( *args, **kwargs): print(&amp;#34;开始验证&amp;#34;) print(&amp;#34;%scalled&amp;#34; % func.__name__) result = func(*args, **kwargs) print(&amp;#34;验证完毕&amp;#34;) print(&amp;#34;%send&amp;#34; % func.__name__) return result return decorator @wraps def connnet_db(): print(&amp;#34;searching&amp;#34;) def singleton(fun): instances = {} def decorator(*args,**kwargs): if fun not in instances: print(111,fun) instances[fun] = fun(*args,**kwargs) return instances[fun] else: print(&amp;#34;已存在&amp;#34;) return decorator def singleton(fun): cache = {} def decorator(*args,**kwargs): if fun not in cache: print(111,fun) cache[fun] = fun(*args,**kwargs) return cache[fun] else: print(&amp;#34;已存在&amp;#34;) return decorator @singleton def fib(i): if i &amp;lt; 2: return 1 return fib(i-1) + fib(i-2) if __name__ == &amp;#39;__main__&amp;#39;: for i in range(10): test() </description>
    </item>
    
  </channel>
</rss>